Step 1: Set Up Laravel
Make sure you have Laravel installed on your system. If not, you can install it using Composer:

composer create-project --prefer-dist laravel/laravel your-api-name

Step 2: Create a Model
Create a model for the resource you want to manage. For example, let's create a Task model:

php artisan make:model Task -m

This command will generate a Task model and a migration file.

Step 3: Define the Migration
Open the generated migration file (located in the database/migrations directory) and define the database table columns. For example:

/***/
// database/migrations/xxxx_xx_xx_create_tasks_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateTasksTable extends Migration
{
    public function up()
    {
        Schema::create('tasks', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('description');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('tasks');
    }
}
/**/

Run the migration to create the database table:
php artisan migrate

Step 4: Create a Controller
Generate a controller for handling the CRUD operations:

php artisan make:controller TaskController

Open the generated controller (app/Http/Controllers/TaskController.php) and implement the CRUD methods.

/****/
// app/Http/Controllers/TaskController.php

namespace App\Http\Controllers;

use App\Models\Task;
use Illuminate\Http\Request;

class TaskController extends Controller
{
    public function index()
    {
        return Task::all();
    }

    public function show($id)
    {
        return Task::find($id);
    }

    public function store(Request $request)
    {
        return Task::create($request->all());
    }

    public function update(Request $request, $id)
    {
        $task = Task::find($id);
        $task->update($request->all());
        return $task;
    }

    public function destroy($id)
    {
        Task::destroy($id);
        return response()->json(['message' => 'Task deleted successfully']);
    }
}
/***/

Step 5: Define API Routes
Open the routes/api.php file and define the routes for your API:
/***/
// routes/api.php

use App\Http\Controllers\TaskController;

Route::get('/tasks', [TaskController::class, 'index']);
Route::get('/tasks/{id}', [TaskController::class, 'show']);
Route::post('/tasks', [TaskController::class, 'store']);
Route::put('/tasks/{id}', [TaskController::class, 'update']);
Route::delete('/tasks/{id}', [TaskController::class, 'destroy']);
/**/

Step 6: Test Your API
Run your Laravel development server:

php artisan serve

GET all tasks:
GET http://localhost:8000/api/tasks

GET a specific task:
GET http://localhost:8000/api/tasks/1

POST a new task:
POST http://localhost:8000/api/tasks
Content-Type: application/json
{
  "title": "Sample Task",
  "description": "This is a sample task description."
}

PUT (Update) an existing task:
PUT http://localhost:8000/api/tasks/1
Content-Type: application/json
{
  "title": "Updated Task",
  "description": "This task has been updated."
}

DELETE a task:
DELETE http://localhost:8000/api/tasks/1

